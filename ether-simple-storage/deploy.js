const ethers = require("ethers"); // import ethers package
const fs = require("fs-extra"); // import fs-extra package
require("dotenv").config(); // import dotenv package

async function main() {
    // compile them in our code
    // http://127.0.0.1:7545

    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL); // connect to the local blockchain
    const encryptJsonKey = fs.readFileSync("./.encryptKey.json", "utf-8"); // read the encrypted key file
    let wallet = await ethers.Wallet.fromEncryptedJsonSync(encryptJsonKey, process.env.PASSWORD); // connect to the local wallet
    // const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider); // connect to the local wallet
    wallet = wallet.connect(provider); // connect to the local wallet
    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf-8"); // read the abi file
    const binary = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf-8"); // read the binary file

    // here factory is an object that we can use to deploy the contract
    const factory = new ethers.ContractFactory(abi, binary, wallet); // create a contract factory
    console.log("Deploying contract...");
    const contract = await factory.deploy(); // await means => wait until the contract is deployed
    // Or
    const transactionReceipt = await contract.deployTransaction.wait(1); // wait for atleast 1 block confirmation
    // We only get a transaction receipt when you wait for atleast 1 block confirmation

    // Whereas the deployTransaction (transaction response) is what you get just when you create a transaction
    console.log("Contract deployed to address:", transactionReceipt);

    const myFavouriteNumber = await contract.retrieve(); // call the retrive function
    console.log(`My favourite number is: ${myFavouriteNumber.toString()}`); // print the number

    // let's update the number
    const updatedNumber = await contract.store("10"); // call the store function
    await updatedNumber.wait(1); // wait for atleast 1 block confirmation

    const updatedFavouriteNumber = await contract.retrieve(); // call the retrive function
    console.log(`Updated Number:  ${updatedFavouriteNumber.toString()}`); // print the transaction hash

    // let's deploy with only transaction data

    /* const nonce = await wallet.getTransactionCount(); // get the nonce
    const tx = { // if we want to know what happening under the hood
        nonce: nonce,
        gasPrice: 20000000000,
        gasLimit: 6721975,
        //gasLimit: ethers.utils.hexlify(1000000),
        to: '0x0000000000000000000000000000000000000000',
        value: 0,
        data: '',
        chainId: 1337,
    };

    const sentTxResponse = await wallet.sendTransaction(tx);
    console.log("Transaction sent: ", sentTxResponse.hash); */
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });
